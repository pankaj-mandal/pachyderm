# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: api/transaction/transaction.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
import grpc
from betterproto.grpc.grpcio_server import ServicerBase

from .. import (
    pfs_v2 as _pfs_v2__,
    pps_v2 as _pps_v2__,
)


if TYPE_CHECKING:
    import grpc
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class DeleteAllRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class TransactionRequest(betterproto.Message):
    create_repo: "_pfs_v2__.CreateRepoRequest" = betterproto.message_field(1)
    """Exactly one of these fields should be set"""

    delete_repo: "_pfs_v2__.DeleteRepoRequest" = betterproto.message_field(2)
    start_commit: "_pfs_v2__.StartCommitRequest" = betterproto.message_field(3)
    finish_commit: "_pfs_v2__.FinishCommitRequest" = betterproto.message_field(4)
    squash_commit_set: "_pfs_v2__.SquashCommitSetRequest" = betterproto.message_field(5)
    create_branch: "_pfs_v2__.CreateBranchRequest" = betterproto.message_field(6)
    delete_branch: "_pfs_v2__.DeleteBranchRequest" = betterproto.message_field(7)
    update_job_state: "_pps_v2__.UpdateJobStateRequest" = betterproto.message_field(8)
    create_pipeline: "_pps_v2__.CreatePipelineRequest" = betterproto.message_field(9)
    stop_job: "_pps_v2__.StopJobRequest" = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class TransactionResponse(betterproto.Message):
    commit: "_pfs_v2__.Commit" = betterproto.message_field(1)
    """
    At most, one of these fields should be set (most responses are empty)
    """


@dataclass(eq=False, repr=False)
class Transaction(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class TransactionInfo(betterproto.Message):
    transaction: "Transaction" = betterproto.message_field(1)
    requests: List["TransactionRequest"] = betterproto.message_field(2)
    responses: List["TransactionResponse"] = betterproto.message_field(3)
    started: datetime = betterproto.message_field(4)
    version: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class TransactionInfos(betterproto.Message):
    transaction_info: List["TransactionInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class BatchTransactionRequest(betterproto.Message):
    requests: List["TransactionRequest"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class StartTransactionRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class InspectTransactionRequest(betterproto.Message):
    transaction: "Transaction" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class DeleteTransactionRequest(betterproto.Message):
    transaction: "Transaction" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ListTransactionRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class FinishTransactionRequest(betterproto.Message):
    transaction: "Transaction" = betterproto.message_field(1)


class ApiStub:
    def __init__(self, channel: "grpc.Channel"):
        self.__rpc_batch_transaction = channel.unary_unary(
            "/transaction_v2.API/BatchTransaction",
            request_serializer=BatchTransactionRequest.SerializeToString,
            response_deserializer=TransactionInfo.FromString,
        )
        self.__rpc_start_transaction = channel.unary_unary(
            "/transaction_v2.API/StartTransaction",
            request_serializer=StartTransactionRequest.SerializeToString,
            response_deserializer=Transaction.FromString,
        )
        self.__rpc_inspect_transaction = channel.unary_unary(
            "/transaction_v2.API/InspectTransaction",
            request_serializer=InspectTransactionRequest.SerializeToString,
            response_deserializer=TransactionInfo.FromString,
        )
        self.__rpc_delete_transaction = channel.unary_unary(
            "/transaction_v2.API/DeleteTransaction",
            request_serializer=DeleteTransactionRequest.SerializeToString,
            response_deserializer=betterproto_lib_google_protobuf.Empty.FromString,
        )
        self.__rpc_list_transaction = channel.unary_unary(
            "/transaction_v2.API/ListTransaction",
            request_serializer=ListTransactionRequest.SerializeToString,
            response_deserializer=TransactionInfos.FromString,
        )
        self.__rpc_finish_transaction = channel.unary_unary(
            "/transaction_v2.API/FinishTransaction",
            request_serializer=FinishTransactionRequest.SerializeToString,
            response_deserializer=TransactionInfo.FromString,
        )
        self.__rpc_delete_all = channel.unary_unary(
            "/transaction_v2.API/DeleteAll",
            request_serializer=DeleteAllRequest.SerializeToString,
            response_deserializer=betterproto_lib_google_protobuf.Empty.FromString,
        )

    def batch_transaction(
        self, batch_transaction_request: "BatchTransactionRequest"
    ) -> "TransactionInfo":
        return self.__rpc_batch_transaction(batch_transaction_request)

    def start_transaction(
        self, start_transaction_request: "StartTransactionRequest"
    ) -> "Transaction":
        return self.__rpc_start_transaction(start_transaction_request)

    def inspect_transaction(
        self, inspect_transaction_request: "InspectTransactionRequest"
    ) -> "TransactionInfo":
        return self.__rpc_inspect_transaction(inspect_transaction_request)

    def delete_transaction(
        self, delete_transaction_request: "DeleteTransactionRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        return self.__rpc_delete_transaction(delete_transaction_request)

    def list_transaction(
        self, list_transaction_request: "ListTransactionRequest"
    ) -> "TransactionInfos":
        return self.__rpc_list_transaction(list_transaction_request)

    def finish_transaction(
        self, finish_transaction_request: "FinishTransactionRequest"
    ) -> "TransactionInfo":
        return self.__rpc_finish_transaction(finish_transaction_request)

    def delete_all(
        self, delete_all_request: "DeleteAllRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        return self.__rpc_delete_all(delete_all_request)


class ApiBase(ServicerBase):
    def batch_transaction(
        self, request: "BatchTransactionRequest", context: "grpc.ServicerContext"
    ) -> "TransactionInfo":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def start_transaction(
        self, request: "StartTransactionRequest", context: "grpc.ServicerContext"
    ) -> "Transaction":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def inspect_transaction(
        self, request: "InspectTransactionRequest", context: "grpc.ServicerContext"
    ) -> "TransactionInfo":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def delete_transaction(
        self, request: "DeleteTransactionRequest", context: "grpc.ServicerContext"
    ) -> "betterproto_lib_google_protobuf.Empty":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def list_transaction(
        self, request: "ListTransactionRequest", context: "grpc.ServicerContext"
    ) -> "TransactionInfos":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def finish_transaction(
        self, request: "FinishTransactionRequest", context: "grpc.ServicerContext"
    ) -> "TransactionInfo":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def delete_all(
        self, request: "DeleteAllRequest", context: "grpc.ServicerContext"
    ) -> "betterproto_lib_google_protobuf.Empty":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    __proto_path__ = "transaction_v2.API"

    @property
    def __rpc_methods__(self):
        return {
            "BatchTransaction": grpc.unary_unary_rpc_method_handler(
                self.batch_transaction,
                request_deserializer=BatchTransactionRequest.FromString,
                response_serializer=BatchTransactionRequest.SerializeToString,
            ),
            "StartTransaction": grpc.unary_unary_rpc_method_handler(
                self.start_transaction,
                request_deserializer=StartTransactionRequest.FromString,
                response_serializer=StartTransactionRequest.SerializeToString,
            ),
            "InspectTransaction": grpc.unary_unary_rpc_method_handler(
                self.inspect_transaction,
                request_deserializer=InspectTransactionRequest.FromString,
                response_serializer=InspectTransactionRequest.SerializeToString,
            ),
            "DeleteTransaction": grpc.unary_unary_rpc_method_handler(
                self.delete_transaction,
                request_deserializer=DeleteTransactionRequest.FromString,
                response_serializer=DeleteTransactionRequest.SerializeToString,
            ),
            "ListTransaction": grpc.unary_unary_rpc_method_handler(
                self.list_transaction,
                request_deserializer=ListTransactionRequest.FromString,
                response_serializer=ListTransactionRequest.SerializeToString,
            ),
            "FinishTransaction": grpc.unary_unary_rpc_method_handler(
                self.finish_transaction,
                request_deserializer=FinishTransactionRequest.FromString,
                response_serializer=FinishTransactionRequest.SerializeToString,
            ),
            "DeleteAll": grpc.unary_unary_rpc_method_handler(
                self.delete_all,
                request_deserializer=DeleteAllRequest.FromString,
                response_serializer=DeleteAllRequest.SerializeToString,
            ),
        }
