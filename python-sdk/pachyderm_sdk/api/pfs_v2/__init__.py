# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: api/pfs/pfs.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import (
    datetime,
    timedelta,
)
from typing import (
    TYPE_CHECKING,
    AsyncIterable,
    AsyncIterator,
    Dict,
    Iterable,
    Iterator,
    List,
    Optional,
    Union,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
import grpc
from betterproto.grpc.grpcio_server import ServicerBase

from .. import (
    auth_v2 as _auth_v2__,
    taskapi as _taskapi__,
)


if TYPE_CHECKING:
    import grpc
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class OriginKind(betterproto.Enum):
    """These are the different places where a commit may be originated from"""

    ORIGIN_KIND_UNKNOWN = 0
    USER = 1
    AUTO = 2
    FSCK = 3
    ALIAS = 4


class FileType(betterproto.Enum):
    RESERVED = 0
    FILE = 1
    DIR = 2


class CommitState(betterproto.Enum):
    """
    CommitState describes the states a commit can be in. The states are
    increasingly specific, i.e. a commit that is FINISHED also counts as
    STARTED.
    """

    COMMIT_STATE_UNKNOWN = 0
    STARTED = 1
    READY = 2
    FINISHING = 3
    FINISHED = 4


class Delimiter(betterproto.Enum):
    NONE = 0
    JSON = 1
    LINE = 2
    SQL = 3
    CSV = 4


class SqlDatabaseEgressFileFormatType(betterproto.Enum):
    UNKNOWN = 0
    CSV = 1
    JSON = 2
    PARQUET = 3


@dataclass(eq=False, repr=False)
class Repo(betterproto.Message):
    name: str = betterproto.string_field(1)
    type: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class Branch(betterproto.Message):
    repo: "Repo" = betterproto.message_field(1)
    name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class File(betterproto.Message):
    commit: "Commit" = betterproto.message_field(1)
    path: str = betterproto.string_field(2)
    datum: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class RepoInfo(betterproto.Message):
    """RepoInfo is the main data structure representing a Repo in etcd"""

    repo: "Repo" = betterproto.message_field(1)
    created: datetime = betterproto.message_field(2)
    size_bytes_upper_bound: int = betterproto.int64_field(3)
    description: str = betterproto.string_field(4)
    branches: List["Branch"] = betterproto.message_field(5)
    auth_info: "RepoAuthInfo" = betterproto.message_field(6)
    """
    Set by ListRepo and InspectRepo if Pachyderm's auth system is active, but
    not stored in etcd. To set a user's auth scope for a repo, use the
    Pachyderm Auth API (in src/client/auth/auth.proto)
    """

    details: "RepoInfoDetails" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class RepoInfoDetails(betterproto.Message):
    """Details are only provided when explicitly requested"""

    size_bytes: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class RepoAuthInfo(betterproto.Message):
    """
    RepoAuthInfo includes the caller's access scope for a repo, and is returned
    by ListRepo and InspectRepo but not persisted in etcd. It's used by the
    Pachyderm dashboard to render repo access appropriately. To set a user's
    auth scope for a repo, use the Pachyderm Auth API (in
    src/client/auth/auth.proto)
    """

    permissions: List["_auth_v2__.Permission"] = betterproto.enum_field(1)
    """
    The callers access level to the relevant repo. These are very granular
    permissions - for the end user it makes sense to show them the roles they
    have instead.
    """

    roles: List[str] = betterproto.string_field(2)
    """
    The caller's roles on the relevant repo. This includes inherited roles from
    the cluster, group membership, etc.
    """


@dataclass(eq=False, repr=False)
class BranchInfo(betterproto.Message):
    branch: "Branch" = betterproto.message_field(1)
    head: "Commit" = betterproto.message_field(2)
    provenance: List["Branch"] = betterproto.message_field(3)
    subvenance: List["Branch"] = betterproto.message_field(4)
    direct_provenance: List["Branch"] = betterproto.message_field(5)
    trigger: "Trigger" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class Trigger(betterproto.Message):
    """
    Trigger defines the conditions under which a head is moved, and to which
    branch it is moved.
    """

    branch: str = betterproto.string_field(1)
    """Which branch this trigger refers to"""

    all: bool = betterproto.bool_field(2)
    """
    All indicates that all conditions must be satisfied before the trigger
    happens, otherwise any conditions being satisfied will trigger it.
    """

    cron_spec: str = betterproto.string_field(3)
    """
    Triggers if the cron spec has been satisfied since the last trigger and
    there's been a new commit.
    """

    size: str = betterproto.string_field(4)
    """
    Triggers if there's been `size` new data added since the last trigger.
    """

    commits: int = betterproto.int64_field(5)
    """
    Triggers if there's been `commits` new commits added since the last
    trigger.
    """


@dataclass(eq=False, repr=False)
class CommitOrigin(betterproto.Message):
    kind: "OriginKind" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class Commit(betterproto.Message):
    """
    Commit is a reference to a commit (e.g. the collection of branches and the
    collection of currently-open commits in etcd are collections of Commit
    protos)
    """

    branch: "Branch" = betterproto.message_field(1)
    id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CommitInfo(betterproto.Message):
    """CommitInfo is the main data structure representing a commit in etcd"""

    commit: "Commit" = betterproto.message_field(1)
    origin: "CommitOrigin" = betterproto.message_field(2)
    description: str = betterproto.string_field(3)
    """description is a user-provided script describing this commit"""

    parent_commit: "Commit" = betterproto.message_field(4)
    child_commits: List["Commit"] = betterproto.message_field(5)
    started: datetime = betterproto.message_field(6)
    finishing: datetime = betterproto.message_field(7)
    finished: datetime = betterproto.message_field(8)
    direct_provenance: List["Branch"] = betterproto.message_field(9)
    error: str = betterproto.string_field(10)
    size_bytes_upper_bound: int = betterproto.int64_field(11)
    details: "CommitInfoDetails" = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class CommitInfoDetails(betterproto.Message):
    """Details are only provided when explicitly requested"""

    size_bytes: int = betterproto.int64_field(1)
    compacting_time: timedelta = betterproto.message_field(2)
    validating_time: timedelta = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CommitSet(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CommitSetInfo(betterproto.Message):
    commit_set: "CommitSet" = betterproto.message_field(1)
    commits: List["CommitInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class FileInfo(betterproto.Message):
    file: "File" = betterproto.message_field(1)
    file_type: "FileType" = betterproto.enum_field(2)
    committed: datetime = betterproto.message_field(3)
    size_bytes: int = betterproto.int64_field(4)
    hash: bytes = betterproto.bytes_field(5)


@dataclass(eq=False, repr=False)
class CreateRepoRequest(betterproto.Message):
    repo: "Repo" = betterproto.message_field(1)
    description: str = betterproto.string_field(2)
    update: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class InspectRepoRequest(betterproto.Message):
    repo: "Repo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ListRepoRequest(betterproto.Message):
    type: str = betterproto.string_field(1)
    """
    type is the type of (system) repos that should be returned an empty string
    requests all repos
    """


@dataclass(eq=False, repr=False)
class DeleteRepoRequest(betterproto.Message):
    repo: "Repo" = betterproto.message_field(1)
    force: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class StartCommitRequest(betterproto.Message):
    parent: "Commit" = betterproto.message_field(1)
    """
    parent may be empty in which case the commit that Branch points to will be
    used as the parent. If the branch does not exist, the commit will have no
    parent.
    """

    description: str = betterproto.string_field(2)
    """description is a user-provided string describing this commit"""

    branch: "Branch" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class FinishCommitRequest(betterproto.Message):
    commit: "Commit" = betterproto.message_field(1)
    description: str = betterproto.string_field(2)
    """
    description is a user-provided string describing this commit. Setting this
    will overwrite the description set in StartCommit
    """

    error: str = betterproto.string_field(3)
    force: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class InspectCommitRequest(betterproto.Message):
    commit: "Commit" = betterproto.message_field(1)
    wait: "CommitState" = betterproto.enum_field(2)
    """
    Wait causes inspect commit to wait until the commit is in the desired
    state.
    """


@dataclass(eq=False, repr=False)
class ListCommitRequest(betterproto.Message):
    repo: "Repo" = betterproto.message_field(1)
    from_: "Commit" = betterproto.message_field(2)
    to: "Commit" = betterproto.message_field(3)
    number: int = betterproto.int64_field(4)
    reverse: bool = betterproto.bool_field(5)
    all: bool = betterproto.bool_field(6)
    origin_kind: "OriginKind" = betterproto.enum_field(7)


@dataclass(eq=False, repr=False)
class InspectCommitSetRequest(betterproto.Message):
    commit_set: "CommitSet" = betterproto.message_field(1)
    wait: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class ListCommitSetRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class SquashCommitSetRequest(betterproto.Message):
    commit_set: "CommitSet" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class DropCommitSetRequest(betterproto.Message):
    commit_set: "CommitSet" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SubscribeCommitRequest(betterproto.Message):
    repo: "Repo" = betterproto.message_field(1)
    branch: str = betterproto.string_field(2)
    from_: "Commit" = betterproto.message_field(3)
    """only commits created since this commit are returned"""

    state: "CommitState" = betterproto.enum_field(4)
    """Don't return commits until they're in (at least) the desired state."""

    all: bool = betterproto.bool_field(5)
    origin_kind: "OriginKind" = betterproto.enum_field(6)


@dataclass(eq=False, repr=False)
class ClearCommitRequest(betterproto.Message):
    commit: "Commit" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CreateBranchRequest(betterproto.Message):
    head: "Commit" = betterproto.message_field(1)
    branch: "Branch" = betterproto.message_field(2)
    provenance: List["Branch"] = betterproto.message_field(3)
    trigger: "Trigger" = betterproto.message_field(4)
    new_commit_set: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class InspectBranchRequest(betterproto.Message):
    branch: "Branch" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ListBranchRequest(betterproto.Message):
    repo: "Repo" = betterproto.message_field(1)
    reverse: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class DeleteBranchRequest(betterproto.Message):
    branch: "Branch" = betterproto.message_field(1)
    force: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class AddFile(betterproto.Message):
    path: str = betterproto.string_field(1)
    datum: str = betterproto.string_field(2)
    raw: Optional[bytes] = betterproto.message_field(
        3, wraps=betterproto.TYPE_BYTES, group="source"
    )
    url: "AddFileUrlSource" = betterproto.message_field(4, group="source")


@dataclass(eq=False, repr=False)
class AddFileUrlSource(betterproto.Message):
    url: str = betterproto.string_field(1)
    recursive: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class DeleteFile(betterproto.Message):
    path: str = betterproto.string_field(1)
    datum: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CopyFile(betterproto.Message):
    dst: str = betterproto.string_field(1)
    datum: str = betterproto.string_field(2)
    src: "File" = betterproto.message_field(3)
    append: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class ModifyFileRequest(betterproto.Message):
    set_commit: "Commit" = betterproto.message_field(1, group="body")
    add_file: "AddFile" = betterproto.message_field(2, group="body")
    delete_file: "DeleteFile" = betterproto.message_field(3, group="body")
    copy_file: "CopyFile" = betterproto.message_field(4, group="body")


@dataclass(eq=False, repr=False)
class GetFileRequest(betterproto.Message):
    file: "File" = betterproto.message_field(1)
    url: str = betterproto.string_field(2)
    offset: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class InspectFileRequest(betterproto.Message):
    file: "File" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ListFileRequest(betterproto.Message):
    file: "File" = betterproto.message_field(1)
    """
    File is the parent directory of the files we want to list. This sets the
    repo, the commit/branch, and path prefix of files we're interested in If
    the "path" field is omitted, a list of files at the top level of the repo
    is returned
    """


@dataclass(eq=False, repr=False)
class WalkFileRequest(betterproto.Message):
    file: "File" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GlobFileRequest(betterproto.Message):
    commit: "Commit" = betterproto.message_field(1)
    pattern: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class DiffFileRequest(betterproto.Message):
    new_file: "File" = betterproto.message_field(1)
    old_file: "File" = betterproto.message_field(2)
    """
    OldFile may be left nil in which case the same path in the parent of
    NewFile's commit will be used.
    """

    shallow: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class DiffFileResponse(betterproto.Message):
    new_file: "FileInfo" = betterproto.message_field(1)
    old_file: "FileInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class FsckRequest(betterproto.Message):
    fix: bool = betterproto.bool_field(1)
    zombie_target: "Commit" = betterproto.message_field(2, group="zombie_check")
    zombie_all: bool = betterproto.bool_field(3, group="zombie_check")
    """run zombie data detection against all pipelines"""


@dataclass(eq=False, repr=False)
class FsckResponse(betterproto.Message):
    fix: str = betterproto.string_field(1)
    error: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CreateFileSetResponse(betterproto.Message):
    file_set_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetFileSetRequest(betterproto.Message):
    commit: "Commit" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AddFileSetRequest(betterproto.Message):
    commit: "Commit" = betterproto.message_field(1)
    file_set_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class RenewFileSetRequest(betterproto.Message):
    file_set_id: str = betterproto.string_field(1)
    ttl_seconds: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class ComposeFileSetRequest(betterproto.Message):
    file_set_ids: List[str] = betterproto.string_field(1)
    ttl_seconds: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class CheckStorageRequest(betterproto.Message):
    read_chunk_data: bool = betterproto.bool_field(1)
    chunk_begin: bytes = betterproto.bytes_field(2)
    chunk_end: bytes = betterproto.bytes_field(3)


@dataclass(eq=False, repr=False)
class CheckStorageResponse(betterproto.Message):
    chunk_object_count: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class PutCacheRequest(betterproto.Message):
    key: str = betterproto.string_field(1)
    value: "betterproto_lib_google_protobuf.Any" = betterproto.message_field(2)
    file_set_ids: List[str] = betterproto.string_field(3)
    tag: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class GetCacheRequest(betterproto.Message):
    key: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetCacheResponse(betterproto.Message):
    value: "betterproto_lib_google_protobuf.Any" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ClearCacheRequest(betterproto.Message):
    tag_prefix: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ActivateAuthRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ActivateAuthResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RunLoadTestRequest(betterproto.Message):
    spec: str = betterproto.string_field(1)
    branch: "Branch" = betterproto.message_field(2)
    seed: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class RunLoadTestResponse(betterproto.Message):
    spec: str = betterproto.string_field(1)
    branch: "Branch" = betterproto.message_field(2)
    seed: int = betterproto.int64_field(3)
    error: str = betterproto.string_field(4)
    duration: timedelta = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class ObjectStorageEgress(betterproto.Message):
    url: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class SqlDatabaseEgress(betterproto.Message):
    url: str = betterproto.string_field(1)
    file_format: "SqlDatabaseEgressFileFormat" = betterproto.message_field(2)
    secret: "SqlDatabaseEgressSecret" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class SqlDatabaseEgressFileFormat(betterproto.Message):
    type: "SqlDatabaseEgressFileFormatType" = betterproto.enum_field(1)
    columns: List[str] = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class SqlDatabaseEgressSecret(betterproto.Message):
    name: str = betterproto.string_field(1)
    key: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class EgressRequest(betterproto.Message):
    commit: "Commit" = betterproto.message_field(1)
    object_storage: "ObjectStorageEgress" = betterproto.message_field(2, group="target")
    sql_database: "SqlDatabaseEgress" = betterproto.message_field(3, group="target")


@dataclass(eq=False, repr=False)
class EgressResponse(betterproto.Message):
    object_storage: "EgressResponseObjectStorageResult" = betterproto.message_field(
        1, group="result"
    )
    sql_database: "EgressResponseSqlDatabaseResult" = betterproto.message_field(
        2, group="result"
    )


@dataclass(eq=False, repr=False)
class EgressResponseObjectStorageResult(betterproto.Message):
    bytes_written: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class EgressResponseSqlDatabaseResult(betterproto.Message):
    rows_written: Dict[str, int] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_INT64
    )


class ApiStub:
    def __init__(self, channel: "grpc.Channel"):
        self.__rpc_create_repo = channel.unary_unary(
            "/pfs_v2.API/CreateRepo",
            request_serializer=CreateRepoRequest.SerializeToString,
            response_deserializer=betterproto_lib_google_protobuf.Empty.FromString,
        )
        self.__rpc_inspect_repo = channel.unary_unary(
            "/pfs_v2.API/InspectRepo",
            request_serializer=InspectRepoRequest.SerializeToString,
            response_deserializer=RepoInfo.FromString,
        )
        self.__rpc_list_repo = channel.unary_stream(
            "/pfs_v2.API/ListRepo",
            request_serializer=ListRepoRequest.SerializeToString,
            response_deserializer=RepoInfo.FromString,
        )
        self.__rpc_delete_repo = channel.unary_unary(
            "/pfs_v2.API/DeleteRepo",
            request_serializer=DeleteRepoRequest.SerializeToString,
            response_deserializer=betterproto_lib_google_protobuf.Empty.FromString,
        )
        self.__rpc_start_commit = channel.unary_unary(
            "/pfs_v2.API/StartCommit",
            request_serializer=StartCommitRequest.SerializeToString,
            response_deserializer=Commit.FromString,
        )
        self.__rpc_finish_commit = channel.unary_unary(
            "/pfs_v2.API/FinishCommit",
            request_serializer=FinishCommitRequest.SerializeToString,
            response_deserializer=betterproto_lib_google_protobuf.Empty.FromString,
        )
        self.__rpc_clear_commit = channel.unary_unary(
            "/pfs_v2.API/ClearCommit",
            request_serializer=ClearCommitRequest.SerializeToString,
            response_deserializer=betterproto_lib_google_protobuf.Empty.FromString,
        )
        self.__rpc_inspect_commit = channel.unary_unary(
            "/pfs_v2.API/InspectCommit",
            request_serializer=InspectCommitRequest.SerializeToString,
            response_deserializer=CommitInfo.FromString,
        )
        self.__rpc_list_commit = channel.unary_stream(
            "/pfs_v2.API/ListCommit",
            request_serializer=ListCommitRequest.SerializeToString,
            response_deserializer=CommitInfo.FromString,
        )
        self.__rpc_subscribe_commit = channel.unary_stream(
            "/pfs_v2.API/SubscribeCommit",
            request_serializer=SubscribeCommitRequest.SerializeToString,
            response_deserializer=CommitInfo.FromString,
        )
        self.__rpc_inspect_commit_set = channel.unary_stream(
            "/pfs_v2.API/InspectCommitSet",
            request_serializer=InspectCommitSetRequest.SerializeToString,
            response_deserializer=CommitInfo.FromString,
        )
        self.__rpc_list_commit_set = channel.unary_stream(
            "/pfs_v2.API/ListCommitSet",
            request_serializer=ListCommitSetRequest.SerializeToString,
            response_deserializer=CommitSetInfo.FromString,
        )
        self.__rpc_squash_commit_set = channel.unary_unary(
            "/pfs_v2.API/SquashCommitSet",
            request_serializer=SquashCommitSetRequest.SerializeToString,
            response_deserializer=betterproto_lib_google_protobuf.Empty.FromString,
        )
        self.__rpc_drop_commit_set = channel.unary_unary(
            "/pfs_v2.API/DropCommitSet",
            request_serializer=DropCommitSetRequest.SerializeToString,
            response_deserializer=betterproto_lib_google_protobuf.Empty.FromString,
        )
        self.__rpc_create_branch = channel.unary_unary(
            "/pfs_v2.API/CreateBranch",
            request_serializer=CreateBranchRequest.SerializeToString,
            response_deserializer=betterproto_lib_google_protobuf.Empty.FromString,
        )
        self.__rpc_inspect_branch = channel.unary_unary(
            "/pfs_v2.API/InspectBranch",
            request_serializer=InspectBranchRequest.SerializeToString,
            response_deserializer=BranchInfo.FromString,
        )
        self.__rpc_list_branch = channel.unary_stream(
            "/pfs_v2.API/ListBranch",
            request_serializer=ListBranchRequest.SerializeToString,
            response_deserializer=BranchInfo.FromString,
        )
        self.__rpc_delete_branch = channel.unary_unary(
            "/pfs_v2.API/DeleteBranch",
            request_serializer=DeleteBranchRequest.SerializeToString,
            response_deserializer=betterproto_lib_google_protobuf.Empty.FromString,
        )
        self.__rpc_modify_file = channel.stream_unary(
            "/pfs_v2.API/ModifyFile",
            request_serializer=ModifyFileRequest.SerializeToString,
            response_deserializer=betterproto_lib_google_protobuf.Empty.FromString,
        )
        self.__rpc_get_file = channel.unary_stream(
            "/pfs_v2.API/GetFile",
            request_serializer=GetFileRequest.SerializeToString,
            response_deserializer=betterproto_lib_google_protobuf.BytesValue.FromString,
        )
        self.__rpc_get_file_tar = channel.unary_stream(
            "/pfs_v2.API/GetFileTAR",
            request_serializer=GetFileRequest.SerializeToString,
            response_deserializer=betterproto_lib_google_protobuf.BytesValue.FromString,
        )
        self.__rpc_inspect_file = channel.unary_unary(
            "/pfs_v2.API/InspectFile",
            request_serializer=InspectFileRequest.SerializeToString,
            response_deserializer=FileInfo.FromString,
        )
        self.__rpc_list_file = channel.unary_stream(
            "/pfs_v2.API/ListFile",
            request_serializer=ListFileRequest.SerializeToString,
            response_deserializer=FileInfo.FromString,
        )
        self.__rpc_walk_file = channel.unary_stream(
            "/pfs_v2.API/WalkFile",
            request_serializer=WalkFileRequest.SerializeToString,
            response_deserializer=FileInfo.FromString,
        )
        self.__rpc_glob_file = channel.unary_stream(
            "/pfs_v2.API/GlobFile",
            request_serializer=GlobFileRequest.SerializeToString,
            response_deserializer=FileInfo.FromString,
        )
        self.__rpc_diff_file = channel.unary_stream(
            "/pfs_v2.API/DiffFile",
            request_serializer=DiffFileRequest.SerializeToString,
            response_deserializer=DiffFileResponse.FromString,
        )
        self.__rpc_activate_auth = channel.unary_unary(
            "/pfs_v2.API/ActivateAuth",
            request_serializer=ActivateAuthRequest.SerializeToString,
            response_deserializer=ActivateAuthResponse.FromString,
        )
        self.__rpc_delete_all = channel.unary_unary(
            "/pfs_v2.API/DeleteAll",
            request_serializer=betterproto_lib_google_protobuf.Empty.SerializeToString,
            response_deserializer=betterproto_lib_google_protobuf.Empty.FromString,
        )
        self.__rpc_fsck = channel.unary_stream(
            "/pfs_v2.API/Fsck",
            request_serializer=FsckRequest.SerializeToString,
            response_deserializer=FsckResponse.FromString,
        )
        self.__rpc_create_file_set = channel.stream_unary(
            "/pfs_v2.API/CreateFileSet",
            request_serializer=ModifyFileRequest.SerializeToString,
            response_deserializer=CreateFileSetResponse.FromString,
        )
        self.__rpc_get_file_set = channel.unary_unary(
            "/pfs_v2.API/GetFileSet",
            request_serializer=GetFileSetRequest.SerializeToString,
            response_deserializer=CreateFileSetResponse.FromString,
        )
        self.__rpc_add_file_set = channel.unary_unary(
            "/pfs_v2.API/AddFileSet",
            request_serializer=AddFileSetRequest.SerializeToString,
            response_deserializer=betterproto_lib_google_protobuf.Empty.FromString,
        )
        self.__rpc_renew_file_set = channel.unary_unary(
            "/pfs_v2.API/RenewFileSet",
            request_serializer=RenewFileSetRequest.SerializeToString,
            response_deserializer=betterproto_lib_google_protobuf.Empty.FromString,
        )
        self.__rpc_compose_file_set = channel.unary_unary(
            "/pfs_v2.API/ComposeFileSet",
            request_serializer=ComposeFileSetRequest.SerializeToString,
            response_deserializer=CreateFileSetResponse.FromString,
        )
        self.__rpc_check_storage = channel.unary_unary(
            "/pfs_v2.API/CheckStorage",
            request_serializer=CheckStorageRequest.SerializeToString,
            response_deserializer=CheckStorageResponse.FromString,
        )
        self.__rpc_put_cache = channel.unary_unary(
            "/pfs_v2.API/PutCache",
            request_serializer=PutCacheRequest.SerializeToString,
            response_deserializer=betterproto_lib_google_protobuf.Empty.FromString,
        )
        self.__rpc_get_cache = channel.unary_unary(
            "/pfs_v2.API/GetCache",
            request_serializer=GetCacheRequest.SerializeToString,
            response_deserializer=GetCacheResponse.FromString,
        )
        self.__rpc_clear_cache = channel.unary_unary(
            "/pfs_v2.API/ClearCache",
            request_serializer=ClearCacheRequest.SerializeToString,
            response_deserializer=betterproto_lib_google_protobuf.Empty.FromString,
        )
        self.__rpc_run_load_test = channel.unary_unary(
            "/pfs_v2.API/RunLoadTest",
            request_serializer=RunLoadTestRequest.SerializeToString,
            response_deserializer=RunLoadTestResponse.FromString,
        )
        self.__rpc_run_load_test_default = channel.unary_unary(
            "/pfs_v2.API/RunLoadTestDefault",
            request_serializer=betterproto_lib_google_protobuf.Empty.SerializeToString,
            response_deserializer=RunLoadTestResponse.FromString,
        )
        self.__rpc_list_task = channel.unary_stream(
            "/pfs_v2.API/ListTask",
            request_serializer=_taskapi__.ListTaskRequest.SerializeToString,
            response_deserializer=_taskapi__.TaskInfo.FromString,
        )
        self.__rpc_egress = channel.unary_unary(
            "/pfs_v2.API/Egress",
            request_serializer=EgressRequest.SerializeToString,
            response_deserializer=EgressResponse.FromString,
        )

    def create_repo(
        self, create_repo_request: "CreateRepoRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        return self.__rpc_create_repo(create_repo_request)

    def inspect_repo(self, inspect_repo_request: "InspectRepoRequest") -> "RepoInfo":
        return self.__rpc_inspect_repo(inspect_repo_request)

    def list_repo(self, list_repo_request: "ListRepoRequest") -> Iterator["RepoInfo"]:
        for response in self.__rpc_list_repo(list_repo_request):
            yield response

    def delete_repo(
        self, delete_repo_request: "DeleteRepoRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        return self.__rpc_delete_repo(delete_repo_request)

    def start_commit(self, start_commit_request: "StartCommitRequest") -> "Commit":
        return self.__rpc_start_commit(start_commit_request)

    def finish_commit(
        self, finish_commit_request: "FinishCommitRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        return self.__rpc_finish_commit(finish_commit_request)

    def clear_commit(
        self, clear_commit_request: "ClearCommitRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        return self.__rpc_clear_commit(clear_commit_request)

    def inspect_commit(
        self, inspect_commit_request: "InspectCommitRequest"
    ) -> "CommitInfo":
        return self.__rpc_inspect_commit(inspect_commit_request)

    def list_commit(
        self, list_commit_request: "ListCommitRequest"
    ) -> Iterator["CommitInfo"]:
        for response in self.__rpc_list_commit(list_commit_request):
            yield response

    def subscribe_commit(
        self, subscribe_commit_request: "SubscribeCommitRequest"
    ) -> Iterator["CommitInfo"]:
        for response in self.__rpc_subscribe_commit(subscribe_commit_request):
            yield response

    def inspect_commit_set(
        self, inspect_commit_set_request: "InspectCommitSetRequest"
    ) -> Iterator["CommitInfo"]:
        for response in self.__rpc_inspect_commit_set(inspect_commit_set_request):
            yield response

    def list_commit_set(
        self, list_commit_set_request: "ListCommitSetRequest"
    ) -> Iterator["CommitSetInfo"]:
        for response in self.__rpc_list_commit_set(list_commit_set_request):
            yield response

    def squash_commit_set(
        self, squash_commit_set_request: "SquashCommitSetRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        return self.__rpc_squash_commit_set(squash_commit_set_request)

    def drop_commit_set(
        self, drop_commit_set_request: "DropCommitSetRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        return self.__rpc_drop_commit_set(drop_commit_set_request)

    def create_branch(
        self, create_branch_request: "CreateBranchRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        return self.__rpc_create_branch(create_branch_request)

    def inspect_branch(
        self, inspect_branch_request: "InspectBranchRequest"
    ) -> "BranchInfo":
        return self.__rpc_inspect_branch(inspect_branch_request)

    def list_branch(
        self, list_branch_request: "ListBranchRequest"
    ) -> Iterator["BranchInfo"]:
        for response in self.__rpc_list_branch(list_branch_request):
            yield response

    def delete_branch(
        self, delete_branch_request: "DeleteBranchRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        return self.__rpc_delete_branch(delete_branch_request)

    def modify_file(
        self, modify_file_request_iterator: Iterable["ModifyFileRequest"]
    ) -> "betterproto_lib_google_protobuf.Empty":
        return self.__rpc_modify_file(modify_file_request_iterator)

    def get_file(
        self, get_file_request: "GetFileRequest"
    ) -> Iterator["betterproto_lib_google_protobuf.BytesValue"]:
        for response in self.__rpc_get_file(get_file_request):
            yield response

    def get_file_tar(
        self, get_file_request: "GetFileRequest"
    ) -> Iterator["betterproto_lib_google_protobuf.BytesValue"]:
        for response in self.__rpc_get_file_tar(get_file_request):
            yield response

    def inspect_file(self, inspect_file_request: "InspectFileRequest") -> "FileInfo":
        return self.__rpc_inspect_file(inspect_file_request)

    def list_file(self, list_file_request: "ListFileRequest") -> Iterator["FileInfo"]:
        for response in self.__rpc_list_file(list_file_request):
            yield response

    def walk_file(self, walk_file_request: "WalkFileRequest") -> Iterator["FileInfo"]:
        for response in self.__rpc_walk_file(walk_file_request):
            yield response

    def glob_file(self, glob_file_request: "GlobFileRequest") -> Iterator["FileInfo"]:
        for response in self.__rpc_glob_file(glob_file_request):
            yield response

    def diff_file(
        self, diff_file_request: "DiffFileRequest"
    ) -> Iterator["DiffFileResponse"]:
        for response in self.__rpc_diff_file(diff_file_request):
            yield response

    def activate_auth(
        self, activate_auth_request: "ActivateAuthRequest"
    ) -> "ActivateAuthResponse":
        return self.__rpc_activate_auth(activate_auth_request)

    def delete_all(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
    ) -> "betterproto_lib_google_protobuf.Empty":
        return self.__rpc_delete_all(betterproto_lib_google_protobuf_empty)

    def fsck(self, fsck_request: "FsckRequest") -> Iterator["FsckResponse"]:
        for response in self.__rpc_fsck(fsck_request):
            yield response

    def create_file_set(
        self, modify_file_request_iterator: Iterable["ModifyFileRequest"]
    ) -> "CreateFileSetResponse":
        return self.__rpc_create_file_set(modify_file_request_iterator)

    def get_file_set(
        self, get_file_set_request: "GetFileSetRequest"
    ) -> "CreateFileSetResponse":
        return self.__rpc_get_file_set(get_file_set_request)

    def add_file_set(
        self, add_file_set_request: "AddFileSetRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        return self.__rpc_add_file_set(add_file_set_request)

    def renew_file_set(
        self, renew_file_set_request: "RenewFileSetRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        return self.__rpc_renew_file_set(renew_file_set_request)

    def compose_file_set(
        self, compose_file_set_request: "ComposeFileSetRequest"
    ) -> "CreateFileSetResponse":
        return self.__rpc_compose_file_set(compose_file_set_request)

    def check_storage(
        self, check_storage_request: "CheckStorageRequest"
    ) -> "CheckStorageResponse":
        return self.__rpc_check_storage(check_storage_request)

    def put_cache(
        self, put_cache_request: "PutCacheRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        return self.__rpc_put_cache(put_cache_request)

    def get_cache(self, get_cache_request: "GetCacheRequest") -> "GetCacheResponse":
        return self.__rpc_get_cache(get_cache_request)

    def clear_cache(
        self, clear_cache_request: "ClearCacheRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        return self.__rpc_clear_cache(clear_cache_request)

    def run_load_test(
        self, run_load_test_request: "RunLoadTestRequest"
    ) -> "RunLoadTestResponse":
        return self.__rpc_run_load_test(run_load_test_request)

    def run_load_test_default(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
    ) -> "RunLoadTestResponse":
        return self.__rpc_run_load_test_default(betterproto_lib_google_protobuf_empty)

    def list_task(
        self, taskapi_list_task_request: "_taskapi__.ListTaskRequest"
    ) -> Iterator["_taskapi__.TaskInfo"]:
        for response in self.__rpc_list_task(taskapi_list_task_request):
            yield response

    def egress(self, egress_request: "EgressRequest") -> "EgressResponse":
        return self.__rpc_egress(egress_request)


class ApiBase(ServicerBase):
    def create_repo(
        self, request: "CreateRepoRequest", context: "grpc.ServicerContext"
    ) -> "betterproto_lib_google_protobuf.Empty":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def inspect_repo(
        self, request: "InspectRepoRequest", context: "grpc.ServicerContext"
    ) -> "RepoInfo":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def list_repo(
        self, request: "ListRepoRequest", context: "grpc.ServicerContext"
    ) -> Iterator["RepoInfo"]:
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def delete_repo(
        self, request: "DeleteRepoRequest", context: "grpc.ServicerContext"
    ) -> "betterproto_lib_google_protobuf.Empty":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def start_commit(
        self, request: "StartCommitRequest", context: "grpc.ServicerContext"
    ) -> "Commit":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def finish_commit(
        self, request: "FinishCommitRequest", context: "grpc.ServicerContext"
    ) -> "betterproto_lib_google_protobuf.Empty":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def clear_commit(
        self, request: "ClearCommitRequest", context: "grpc.ServicerContext"
    ) -> "betterproto_lib_google_protobuf.Empty":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def inspect_commit(
        self, request: "InspectCommitRequest", context: "grpc.ServicerContext"
    ) -> "CommitInfo":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def list_commit(
        self, request: "ListCommitRequest", context: "grpc.ServicerContext"
    ) -> Iterator["CommitInfo"]:
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def subscribe_commit(
        self, request: "SubscribeCommitRequest", context: "grpc.ServicerContext"
    ) -> Iterator["CommitInfo"]:
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def inspect_commit_set(
        self, request: "InspectCommitSetRequest", context: "grpc.ServicerContext"
    ) -> Iterator["CommitInfo"]:
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def list_commit_set(
        self, request: "ListCommitSetRequest", context: "grpc.ServicerContext"
    ) -> Iterator["CommitSetInfo"]:
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def squash_commit_set(
        self, request: "SquashCommitSetRequest", context: "grpc.ServicerContext"
    ) -> "betterproto_lib_google_protobuf.Empty":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def drop_commit_set(
        self, request: "DropCommitSetRequest", context: "grpc.ServicerContext"
    ) -> "betterproto_lib_google_protobuf.Empty":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def create_branch(
        self, request: "CreateBranchRequest", context: "grpc.ServicerContext"
    ) -> "betterproto_lib_google_protobuf.Empty":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def inspect_branch(
        self, request: "InspectBranchRequest", context: "grpc.ServicerContext"
    ) -> "BranchInfo":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def list_branch(
        self, request: "ListBranchRequest", context: "grpc.ServicerContext"
    ) -> Iterator["BranchInfo"]:
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def delete_branch(
        self, request: "DeleteBranchRequest", context: "grpc.ServicerContext"
    ) -> "betterproto_lib_google_protobuf.Empty":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def modify_file(
        self,
        request_iterator: Iterator["ModifyFileRequest"],
        context: "grpc.ServicerContext",
    ) -> "betterproto_lib_google_protobuf.Empty":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def get_file(
        self, request: "GetFileRequest", context: "grpc.ServicerContext"
    ) -> Iterator["betterproto_lib_google_protobuf.BytesValue"]:
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def get_file_tar(
        self, request: "GetFileRequest", context: "grpc.ServicerContext"
    ) -> Iterator["betterproto_lib_google_protobuf.BytesValue"]:
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def inspect_file(
        self, request: "InspectFileRequest", context: "grpc.ServicerContext"
    ) -> "FileInfo":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def list_file(
        self, request: "ListFileRequest", context: "grpc.ServicerContext"
    ) -> Iterator["FileInfo"]:
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def walk_file(
        self, request: "WalkFileRequest", context: "grpc.ServicerContext"
    ) -> Iterator["FileInfo"]:
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def glob_file(
        self, request: "GlobFileRequest", context: "grpc.ServicerContext"
    ) -> Iterator["FileInfo"]:
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def diff_file(
        self, request: "DiffFileRequest", context: "grpc.ServicerContext"
    ) -> Iterator["DiffFileResponse"]:
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def activate_auth(
        self, request: "ActivateAuthRequest", context: "grpc.ServicerContext"
    ) -> "ActivateAuthResponse":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def delete_all(
        self,
        request: "betterproto_lib_google_protobuf.Empty",
        context: "grpc.ServicerContext",
    ) -> "betterproto_lib_google_protobuf.Empty":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def fsck(
        self, request: "FsckRequest", context: "grpc.ServicerContext"
    ) -> Iterator["FsckResponse"]:
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def create_file_set(
        self,
        request_iterator: Iterator["ModifyFileRequest"],
        context: "grpc.ServicerContext",
    ) -> "CreateFileSetResponse":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def get_file_set(
        self, request: "GetFileSetRequest", context: "grpc.ServicerContext"
    ) -> "CreateFileSetResponse":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def add_file_set(
        self, request: "AddFileSetRequest", context: "grpc.ServicerContext"
    ) -> "betterproto_lib_google_protobuf.Empty":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def renew_file_set(
        self, request: "RenewFileSetRequest", context: "grpc.ServicerContext"
    ) -> "betterproto_lib_google_protobuf.Empty":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def compose_file_set(
        self, request: "ComposeFileSetRequest", context: "grpc.ServicerContext"
    ) -> "CreateFileSetResponse":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def check_storage(
        self, request: "CheckStorageRequest", context: "grpc.ServicerContext"
    ) -> "CheckStorageResponse":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def put_cache(
        self, request: "PutCacheRequest", context: "grpc.ServicerContext"
    ) -> "betterproto_lib_google_protobuf.Empty":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def get_cache(
        self, request: "GetCacheRequest", context: "grpc.ServicerContext"
    ) -> "GetCacheResponse":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def clear_cache(
        self, request: "ClearCacheRequest", context: "grpc.ServicerContext"
    ) -> "betterproto_lib_google_protobuf.Empty":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def run_load_test(
        self, request: "RunLoadTestRequest", context: "grpc.ServicerContext"
    ) -> "RunLoadTestResponse":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def run_load_test_default(
        self,
        request: "betterproto_lib_google_protobuf.Empty",
        context: "grpc.ServicerContext",
    ) -> "RunLoadTestResponse":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def list_task(
        self, request: "_taskapi__.ListTaskRequest", context: "grpc.ServicerContext"
    ) -> Iterator["_taskapi__.TaskInfo"]:
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def egress(
        self, request: "EgressRequest", context: "grpc.ServicerContext"
    ) -> "EgressResponse":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    __proto_path__ = "pfs_v2.API"

    @property
    def __rpc_methods__(self):
        return {
            "CreateRepo": grpc.unary_unary_rpc_method_handler(
                self.create_repo,
                request_deserializer=CreateRepoRequest.FromString,
                response_serializer=CreateRepoRequest.SerializeToString,
            ),
            "InspectRepo": grpc.unary_unary_rpc_method_handler(
                self.inspect_repo,
                request_deserializer=InspectRepoRequest.FromString,
                response_serializer=InspectRepoRequest.SerializeToString,
            ),
            "ListRepo": grpc.unary_stream_rpc_method_handler(
                self.list_repo,
                request_deserializer=ListRepoRequest.FromString,
                response_serializer=ListRepoRequest.SerializeToString,
            ),
            "DeleteRepo": grpc.unary_unary_rpc_method_handler(
                self.delete_repo,
                request_deserializer=DeleteRepoRequest.FromString,
                response_serializer=DeleteRepoRequest.SerializeToString,
            ),
            "StartCommit": grpc.unary_unary_rpc_method_handler(
                self.start_commit,
                request_deserializer=StartCommitRequest.FromString,
                response_serializer=StartCommitRequest.SerializeToString,
            ),
            "FinishCommit": grpc.unary_unary_rpc_method_handler(
                self.finish_commit,
                request_deserializer=FinishCommitRequest.FromString,
                response_serializer=FinishCommitRequest.SerializeToString,
            ),
            "ClearCommit": grpc.unary_unary_rpc_method_handler(
                self.clear_commit,
                request_deserializer=ClearCommitRequest.FromString,
                response_serializer=ClearCommitRequest.SerializeToString,
            ),
            "InspectCommit": grpc.unary_unary_rpc_method_handler(
                self.inspect_commit,
                request_deserializer=InspectCommitRequest.FromString,
                response_serializer=InspectCommitRequest.SerializeToString,
            ),
            "ListCommit": grpc.unary_stream_rpc_method_handler(
                self.list_commit,
                request_deserializer=ListCommitRequest.FromString,
                response_serializer=ListCommitRequest.SerializeToString,
            ),
            "SubscribeCommit": grpc.unary_stream_rpc_method_handler(
                self.subscribe_commit,
                request_deserializer=SubscribeCommitRequest.FromString,
                response_serializer=SubscribeCommitRequest.SerializeToString,
            ),
            "InspectCommitSet": grpc.unary_stream_rpc_method_handler(
                self.inspect_commit_set,
                request_deserializer=InspectCommitSetRequest.FromString,
                response_serializer=InspectCommitSetRequest.SerializeToString,
            ),
            "ListCommitSet": grpc.unary_stream_rpc_method_handler(
                self.list_commit_set,
                request_deserializer=ListCommitSetRequest.FromString,
                response_serializer=ListCommitSetRequest.SerializeToString,
            ),
            "SquashCommitSet": grpc.unary_unary_rpc_method_handler(
                self.squash_commit_set,
                request_deserializer=SquashCommitSetRequest.FromString,
                response_serializer=SquashCommitSetRequest.SerializeToString,
            ),
            "DropCommitSet": grpc.unary_unary_rpc_method_handler(
                self.drop_commit_set,
                request_deserializer=DropCommitSetRequest.FromString,
                response_serializer=DropCommitSetRequest.SerializeToString,
            ),
            "CreateBranch": grpc.unary_unary_rpc_method_handler(
                self.create_branch,
                request_deserializer=CreateBranchRequest.FromString,
                response_serializer=CreateBranchRequest.SerializeToString,
            ),
            "InspectBranch": grpc.unary_unary_rpc_method_handler(
                self.inspect_branch,
                request_deserializer=InspectBranchRequest.FromString,
                response_serializer=InspectBranchRequest.SerializeToString,
            ),
            "ListBranch": grpc.unary_stream_rpc_method_handler(
                self.list_branch,
                request_deserializer=ListBranchRequest.FromString,
                response_serializer=ListBranchRequest.SerializeToString,
            ),
            "DeleteBranch": grpc.unary_unary_rpc_method_handler(
                self.delete_branch,
                request_deserializer=DeleteBranchRequest.FromString,
                response_serializer=DeleteBranchRequest.SerializeToString,
            ),
            "ModifyFile": grpc.stream_unary_rpc_method_handler(
                self.modify_file,
                request_deserializer=ModifyFileRequest.FromString,
                response_serializer=ModifyFileRequest.SerializeToString,
            ),
            "GetFile": grpc.unary_stream_rpc_method_handler(
                self.get_file,
                request_deserializer=GetFileRequest.FromString,
                response_serializer=GetFileRequest.SerializeToString,
            ),
            "GetFileTAR": grpc.unary_stream_rpc_method_handler(
                self.get_file_tar,
                request_deserializer=GetFileRequest.FromString,
                response_serializer=GetFileRequest.SerializeToString,
            ),
            "InspectFile": grpc.unary_unary_rpc_method_handler(
                self.inspect_file,
                request_deserializer=InspectFileRequest.FromString,
                response_serializer=InspectFileRequest.SerializeToString,
            ),
            "ListFile": grpc.unary_stream_rpc_method_handler(
                self.list_file,
                request_deserializer=ListFileRequest.FromString,
                response_serializer=ListFileRequest.SerializeToString,
            ),
            "WalkFile": grpc.unary_stream_rpc_method_handler(
                self.walk_file,
                request_deserializer=WalkFileRequest.FromString,
                response_serializer=WalkFileRequest.SerializeToString,
            ),
            "GlobFile": grpc.unary_stream_rpc_method_handler(
                self.glob_file,
                request_deserializer=GlobFileRequest.FromString,
                response_serializer=GlobFileRequest.SerializeToString,
            ),
            "DiffFile": grpc.unary_stream_rpc_method_handler(
                self.diff_file,
                request_deserializer=DiffFileRequest.FromString,
                response_serializer=DiffFileRequest.SerializeToString,
            ),
            "ActivateAuth": grpc.unary_unary_rpc_method_handler(
                self.activate_auth,
                request_deserializer=ActivateAuthRequest.FromString,
                response_serializer=ActivateAuthRequest.SerializeToString,
            ),
            "DeleteAll": grpc.unary_unary_rpc_method_handler(
                self.delete_all,
                request_deserializer=betterproto_lib_google_protobuf.Empty.FromString,
                response_serializer=betterproto_lib_google_protobuf.Empty.SerializeToString,
            ),
            "Fsck": grpc.unary_stream_rpc_method_handler(
                self.fsck,
                request_deserializer=FsckRequest.FromString,
                response_serializer=FsckRequest.SerializeToString,
            ),
            "CreateFileSet": grpc.stream_unary_rpc_method_handler(
                self.create_file_set,
                request_deserializer=ModifyFileRequest.FromString,
                response_serializer=ModifyFileRequest.SerializeToString,
            ),
            "GetFileSet": grpc.unary_unary_rpc_method_handler(
                self.get_file_set,
                request_deserializer=GetFileSetRequest.FromString,
                response_serializer=GetFileSetRequest.SerializeToString,
            ),
            "AddFileSet": grpc.unary_unary_rpc_method_handler(
                self.add_file_set,
                request_deserializer=AddFileSetRequest.FromString,
                response_serializer=AddFileSetRequest.SerializeToString,
            ),
            "RenewFileSet": grpc.unary_unary_rpc_method_handler(
                self.renew_file_set,
                request_deserializer=RenewFileSetRequest.FromString,
                response_serializer=RenewFileSetRequest.SerializeToString,
            ),
            "ComposeFileSet": grpc.unary_unary_rpc_method_handler(
                self.compose_file_set,
                request_deserializer=ComposeFileSetRequest.FromString,
                response_serializer=ComposeFileSetRequest.SerializeToString,
            ),
            "CheckStorage": grpc.unary_unary_rpc_method_handler(
                self.check_storage,
                request_deserializer=CheckStorageRequest.FromString,
                response_serializer=CheckStorageRequest.SerializeToString,
            ),
            "PutCache": grpc.unary_unary_rpc_method_handler(
                self.put_cache,
                request_deserializer=PutCacheRequest.FromString,
                response_serializer=PutCacheRequest.SerializeToString,
            ),
            "GetCache": grpc.unary_unary_rpc_method_handler(
                self.get_cache,
                request_deserializer=GetCacheRequest.FromString,
                response_serializer=GetCacheRequest.SerializeToString,
            ),
            "ClearCache": grpc.unary_unary_rpc_method_handler(
                self.clear_cache,
                request_deserializer=ClearCacheRequest.FromString,
                response_serializer=ClearCacheRequest.SerializeToString,
            ),
            "RunLoadTest": grpc.unary_unary_rpc_method_handler(
                self.run_load_test,
                request_deserializer=RunLoadTestRequest.FromString,
                response_serializer=RunLoadTestRequest.SerializeToString,
            ),
            "RunLoadTestDefault": grpc.unary_unary_rpc_method_handler(
                self.run_load_test_default,
                request_deserializer=betterproto_lib_google_protobuf.Empty.FromString,
                response_serializer=betterproto_lib_google_protobuf.Empty.SerializeToString,
            ),
            "ListTask": grpc.unary_stream_rpc_method_handler(
                self.list_task,
                request_deserializer=_taskapi__.ListTaskRequest.FromString,
                response_serializer=_taskapi__.ListTaskRequest.SerializeToString,
            ),
            "Egress": grpc.unary_unary_rpc_method_handler(
                self.egress,
                request_deserializer=EgressRequest.FromString,
                response_serializer=EgressRequest.SerializeToString,
            ),
        }
