# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: api/proxy/proxy.proto
# plugin: python-betterproto
# This file has been @generated
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterator,
    Dict,
    Iterator,
    Optional,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
import grpc
from betterproto.grpc.grpcio_server import ServicerBase


if TYPE_CHECKING:
    import grpc


@dataclass(eq=False, repr=False)
class ListenRequest(betterproto.Message):
    channel: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ListenResponse(betterproto.Message):
    extra: str = betterproto.string_field(1)


class ApiStub:
    def __init__(self, channel: "grpc.Channel"):
        self.__rpc_listen = channel.unary_stream(
            "/proxy.API/Listen",
            request_serializer=ListenRequest.SerializeToString,
            response_deserializer=ListenResponse.FromString,
        )

    def listen(self, *, channel: str = "") -> Iterator["ListenResponse"]:
        request = ListenRequest()
        request.channel = channel

        for response in self.__rpc_listen(request):
            yield response


class ApiBase(ServicerBase):
    def listen(
        self, channel: str, context: "grpc.ServicerContext"
    ) -> Iterator["ListenResponse"]:
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    __proto_path__ = "proxy.API"

    @property
    def __rpc_methods__(self):
        return {
            "Listen": grpc.unary_stream_rpc_method_handler(
                self.listen,
                request_deserializer=ListenRequest.FromString,
                response_serializer=ListenRequest.SerializeToString,
            ),
        }
