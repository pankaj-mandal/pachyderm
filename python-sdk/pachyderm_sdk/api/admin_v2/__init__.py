# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: api/admin/admin.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    Optional,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
import grpc
from betterproto.grpc.grpcio_server import ServicerBase


if TYPE_CHECKING:
    import grpc
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class ClusterInfo(betterproto.Message):
    id: str = betterproto.string_field(1)
    deployment_id: str = betterproto.string_field(2)


class ApiStub:
    def __init__(self, channel: "grpc.Channel"):
        self.__rpc_inspect_cluster = channel.unary_unary(
            "/admin_v2.API/InspectCluster",
            request_serializer=betterproto_lib_google_protobuf.Empty.SerializeToString,
            response_deserializer=ClusterInfo.FromString,
        )

    def inspect_cluster(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
    ) -> "ClusterInfo":
        return self.__rpc_inspect_cluster(betterproto_lib_google_protobuf_empty)


class ApiBase(ServicerBase):
    def inspect_cluster(
        self,
        request: "betterproto_lib_google_protobuf.Empty",
        context: "grpc.ServicerContext",
    ) -> "ClusterInfo":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    __proto_path__ = "admin_v2.API"

    @property
    def __rpc_methods__(self):
        return {
            "InspectCluster": grpc.unary_unary_rpc_method_handler(
                self.inspect_cluster,
                request_deserializer=betterproto_lib_google_protobuf.Empty.FromString,
                response_serializer=betterproto_lib_google_protobuf.Empty.SerializeToString,
            ),
        }
